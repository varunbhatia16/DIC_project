/* Copyright 2014 Stanford University and Los Alamos National Security, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

struct point
{
  x: int,
  y: int,
}

task read_write_aliased(r0: region<point>, r1: region<point>,
                        x0: point@r0, x1: point@r1)
  , reads(r0.x, r1.y), writes(r0.x, r1.y)
{
  x0->x += 1;
  x1->y += 1;
}

task main()
{
  let r = region<point>(1);
  let x = new<point@r>();
  let c = color(coloring<r>(), x, 0);
  let p0 = partition<r, disjoint>(c);
  let r0 = p0[0];
  let p1 = partition<r, disjoint>(c);
  let r1 = p1[0];

  x->x = 0;
  x->y = 0;
  read_write_aliased(r0, r1, downregion<r0>(x), downregion<r1>(x));
  assert x->x == 1;
  assert x->y == 1;
}
