/* Copyright 2014 Stanford University and Los Alamos National Security, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

struct point
{
  x: int,
  y: int,
  z: int,
}

task make_point(r: region<point>, x: int, y: int, z: int): point@r
  , reads(r), writes(r)
{
  let p: point@r = new<point@r>();
  *p = (*p){x: x, y: y, z: z};
  return p;
}

task read_write_point(ra: region<point>, rb: region<point>, pa: point@ra, pb: point@rb)
  , reads(ra.x, rb), writes(rb.{y, z})
{
  pb->y = pa->x + pb->z;
  pb->z = pb->x;
}

task main()
{
  let ra: region<point> = region<point>(1);
  let pa: point@ra = make_point(ra, 1, 2, 3);
  let rb: region<point> = region<point>(1);
  let pb: point@rb = make_point(rb, 1, 2, 3);
  read_write_point(ra, rb, pa, pb);
}
