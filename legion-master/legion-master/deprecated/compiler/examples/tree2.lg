/* Copyright 2014 Stanford University and Los Alamos National Security, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

struct list<ra: region<list<ra>>>
{
  data: int,
  next: list<ra>@ra,
}

struct tree2<rb: region<list<rb>>,
             rc: region<list<rb>>,
             rd: region<tree2<rb, ?, rd>>>
            [re: region<list<rb>>,
             rf: region<list<rb>>]
  , re <= rc
  , rf <= rc
  , re * rf
{
  data: list<rb>@rc,
  lhs: tree2<rb, re, rd>@rd,
  rhs: tree2<rb, rf, rd>@rd,
}

task make_tree2(rg: region<list<rg>>,
                rh: region<list<rg>>,
                ri: region<tree2<rg, ?, ri>>,
                l: list<rg>@rg, min: int, max: int)
  : tree2<rg, rh, ri>@ri
  , reads(rg, ri)
  , writes(ri)
{
  if (isnull(l)) {
    return null<tree2<rg, rh, ri>@ri>();
  } else {
    if (l->data < min || l->data > max) {
      return make_tree2(rg, rh, ri, l->next, min, max);
    } else {
      let root = new<tree2<rg, rh, ri>@ri>();
      let p = partition<rh, disjoint>(coloring<rh>()) /* FIXME */;
      let rj = p[0];
      let rk = p[1];
      let ptr = downregion<rh>(l);
      let lhs = make_tree2(rg, rj, ri, l->next, min, l->data);
      let rhs = make_tree2(rg, rk, ri, l->next, l->data, max);
      *root = pack (*root){data: ptr, lhs: lhs, rhs: rhs} as tree2<rg, rh, ri>[rj, rk];
      return root;
    }
  }
}

task main() {}
