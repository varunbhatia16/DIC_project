/* Copyright 2014 Stanford University and Los Alamos National Security, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Inspired by https://github.com/losalamos/SNAP

import "math.h";

///
/// Configuration
///

struct config
{
  nt:     int,  // number of time steps

  ndim:   int,  // number of dimensions

  ng:     int,  // number of energy groups
  nx:     int,  // number of cells in x
  ny:     int,  // number of cells in y
  nz:     int,  // number of cells in z
  noct:   int,  // number of octancts
  nang:   int,  // number of discrete angles per cell per octant

  nmom:   int,  // scattering order
  cmom:   int,  // number of moments according to nmom

  nbx:    int,  // number of blocks in x
  nby:    int,  // number of blocks in y
  nbz:    int,  // number of blocks in z

  ncx:    int,  // number of cells in a block of x
  ncy:    int,  // number of cells in a block of y
  ncz:    int,  // number of cells in a block of z
}

///
/// Block Coordinates, Linearization
///

struct block_id
{
  t:   int,     // time (double buffer) (0 or 1)
  g:   int,     // energy group
  bx:  int,     // x coordinate
  by:  int,     // y coordinate
  bz:  int,     // z coordinate
}

task block_id_stride_t(cfg: config): int
{
  return cfg.nbx*cfg.nby*cfg.nbz*cfg.ng;
}

task block_id_stride_g(cfg: config): int
{
  return cfg.nbx*cfg.nby*cfg.nbz;
}

task block_id_stride_bz(cfg: config): int
{
  return cfg.nbx*cfg.nby;
}

task block_id_stride_by(cfg: config): int
{
  return cfg.nbx;
}

task block_id_stride_bx(cfg: config): int
{
  return 1;
}

task block_id_to_int(b: block_id, cfg: config): int
{
  return b.t*block_id_stride_t(cfg) +
         b.g*block_id_stride_g(cfg) +
         b.bx*block_id_stride_bx(cfg) +
         b.by*block_id_stride_by(cfg) +
         b.bz*block_id_stride_bz(cfg);
}

///
/// Cell Coordinates, Linearization
///

struct cell_id
{
  t: int,       // time (double buffer) (0 or 1)
  g: int,       // energy group
  x: int,       // global x coordinate
  y: int,       // global y coordinate
  z: int,       // global z coordinate
  n: int,       // octant
  m: int,       // angle within octant
}

task cell_id_stride_t(cfg: config): int
{
  return cfg.nang*cfg.noct*cfg.nx*cfg.ny*cfg.nz*cfg.ng;
}

task cell_id_stride_g(cfg: config): int
{
  return cfg.nang*cfg.noct*cfg.nx*cfg.ny*cfg.nz;
}

task cell_id_stride_z(cfg: config): int
{
  return cfg.nang*cfg.noct*cfg.nx*cfg.ny;
}

task cell_id_stride_y(cfg: config): int
{
  return cfg.nang*cfg.noct*cfg.nx;
}

task cell_id_stride_x(cfg: config): int
{
  return cfg.nang*cfg.noct;
}

task cell_id_stride_n(cfg: config): int
{
  return cfg.nang;
}

task cell_id_stride_m(cfg: config): int
{
  return 1;
}

task cell_id_to_int(c: cell_id, cfg: config): int
{
  return c.t*cell_id_stride_t(cfg) +
         c.g*cell_id_stride_g(cfg) +
         c.x*cell_id_stride_x(cfg) +
         c.y*cell_id_stride_y(cfg) +
         c.z*cell_id_stride_z(cfg) +
         c.n*cell_id_stride_n(cfg) +
         c.m*cell_id_stride_m(cfg);
}

task cell_block_id(c: cell_id, cfg: config): block_id
{
  let bx = int(floor(double(c.x)/double(cfg.ncx)));
  let by = int(floor(double(c.y)/double(cfg.ncy)));
  let bz = int(floor(double(c.z)/double(cfg.ncz)));

  return {
    t: c.t,
    g: c.g,
    bx: bx,
    by: by,
    bz: bz,
  };
}

task block_corner_cell_id(b: block_id, dx: int, dy: int, dz: int, cfg: config): cell_id
{
  var x = b.bx*cfg.ncx;
  if (dx > 0) {
    x += cfg.ncx - 1;
  }
  var y = b.by*cfg.ncy;
  if (dy > 0) {
    y += cfg.ncy - 1;
  }
  var z = b.bz*cfg.ncz;
  if (dz > 0) {
    z += cfg.ncz - 1;
  }

  return {
    t: b.t,
    g: b.g,
    x: x,
    y: y,
    z: z,
    n: 0,
    m: 0,
  };
}

///
/// Face Coordinates, Linearization
///

struct face_id
{
  d: int,       // direction (x=0,y=1,z=2)
  g: int,       // energy group
  x: int,       // global x coordinate
  y: int,       // global y coordinate
  z: int,       // global z coordinate
  n: int,       // octant
  m: int,       // angle within octant
}

task face_id_stride_g(d: int, cfg: config): int
{
  var nx = cfg.nx;
  if (d == 0) {
    nx = 1;
  }
  var ny = cfg.ny;
  if (d == 1) {
    ny = 1;
  }
  var nz = cfg.nz;
  if (d == 2) {
    nz = 1;
  }
  return cfg.nang*cfg.noct*nx*ny*nz;
}

task face_id_stride_z(d: int, cfg: config): int
{
  var nx = cfg.nx;
  if (d == 0) {
    nx = 1;
  }
  var ny = cfg.ny;
  if (d == 1) {
    ny = 1;
  }
  return cfg.nang*cfg.noct*cfg.nx*cfg.ny;
}

task face_id_stride_y(d: int, cfg: config): int
{
  var nx = cfg.nx;
  if (d == 0) {
    nx = 1;
  }
  return cfg.nang*cfg.noct*cfg.nx;
}

task face_id_stride_x(d: int, cfg: config): int
{
  return cfg.nang*cfg.noct;
}

task face_id_stride_n(d: int, cfg: config): int
{
  return cfg.nang;
}

task face_id_stride_m(d: int, cfg: config): int
{
  return 1;
}

task face_id_to_int(f: face_id, cfg: config): int
{
  return f.g*face_id_stride_g(f.d, cfg) +
         f.x*face_id_stride_x(f.d, cfg) +
         f.y*face_id_stride_y(f.d, cfg) +
         f.z*face_id_stride_z(f.d, cfg) +
         f.n*face_id_stride_n(f.d, cfg) +
         f.m*face_id_stride_m(f.d, cfg);
}

task face_block_id(f: face_id, cfg: config): block_id
{
  let bx = int(floor(double(f.x)/double(cfg.ncx)));
  let by = int(floor(double(f.y)/double(cfg.ncy)));
  let bz = int(floor(double(f.z)/double(cfg.ncz)));

  return {
    t: 0,
    g: f.g,
    bx: bx,
    by: by,
    bz: bz,
  };
}

task block_corner_face_id(b: block_id, d: int, dx: int, dy: int, dz: int, cfg: config): face_id
{
  var x = 0;
  if (d != 0) {
    x = b.bx*cfg.ncx;
    if (dx > 0) {
      x += cfg.ncx - 1;
    }
  }
  var y = 0;
  if (d != 1) {
    y = b.by*cfg.ncy;
    if (dy > 0) {
      y += cfg.ncy - 1;
    }
  }
  var z = 0;
  if (d != 2) {
    z = b.bz*cfg.ncz;
    if (dz > 0) {
      z += cfg.ncz - 1;
    }
  }

  return {
    d: d,
    g: b.g,
    x: x,
    y: y,
    z: z,
    n: 0,
    m: 0,
  };
}

task project_block_id_to_face(b: block_id, d: int, cfg: config): block_id
{
  var bx = b.bx;
  if (d == 0) {
    bx = 0;
  }
  var by = b.by;
  if (d == 1) {
    by = 0;
  }
  var bz = b.bz;
  if (d == 2) {
    bz = 0;
  }

  return {
    t: 0,
    g: b.g,
    bx: bx,
    by: by,
    bz: bz,
  };
}

///
/// Initialization
///

task initialize_cells(is: ispace<int>, cells: array<is, double>)
  , writes(cells)
{
  for i in is {
    cells[i] = 1.0;
  }
}

task initialize_vdelt(is: ispace<int>, vdelt: array<is, double>)
  , writes(vdelt)
{
  for i in is {
    vdelt[i] = 1.0;
  }
}

task initialize_faces(is: ispace<int>, faces: array<is, double>)
  , writes(faces)
{
  for i in is {
    faces[i] = 0.0;
  }
}

///
/// Sweep
///

task sweep1d(b0: block_id, b1: block_id,
             // is_source: ispace<int>, source: array<is_source, double>,
             is_cells_t0: ispace<int>, cells_t0: array<is_cells_t0, double>,
             is_cells_t1: ispace<int>, cells_t1: array<is_cells_t1, double>,
             is_faces_yz: ispace<int>, faces_yz: array<is_faces_yz, double>,
             vdelt: double,             // time-absorption coefficient
             dt: int, dx: int,
             cfg: config)
  , reads(cells_t0, cells_t1, faces_yz)
  , writes(cells_t1, faces_yz)
{
  // Determine octant for direction of sweep.
  var n = 0;
  if (dx < 0) {
    n = 1;
  }

  // Compute initial cell in block.
  let c0 = block_corner_cell_id(b0, -dx, 0, 0, cfg){n: n};
  let f0 = block_corner_face_id(b0, 0, -dx, 0, 0, cfg){n: n};

  // Strides in each dimension.
  let cst = dt*cell_id_stride_t(cfg);    // cell stride in t
  let csx = dx*cell_id_stride_x(cfg);    // cell stride in x
  let csm = cell_id_stride_m(cfg);       // cell stride in m
  let fsx = dx*face_id_stride_x(0, cfg); // face stride in x
  let fsm = face_id_stride_m(0, cfg);    // face stride in m

  // For all cells in block:
  var fx = face_id_to_int(f0, cfg);
  var cx_t0 = cell_id_to_int(c0, cfg);
  let stop_cx_t0 = cx_t0 + (cfg.ncx - 1)*csx;
  while (cx_t0 != stop_cx_t0) {
    let cx_t1 = cx_t0 + cst;

    // For all angles:
    if (vdelt != 0.0) {
      var m = 0;
      while (m < cfg.nang*csm) {
        cells_t1[cx_t1 + m] = 2.0*faces_yz[fx] - cells_t0[cx_t0 + m];
        m += csm;
      }
    }

    cx_t0 += csx;
  }
}

///
/// Colorings
///

task color_cells(is_cells: ispace<int>, cfg: config): coloring<is_cells>
{
  var result = coloring<is_cells>();

  let nts = ispace<int>(2);
  let ngs = ispace<int>(cfg.ng);
  let nzs = ispace<int>(cfg.nz);
  let nys = ispace<int>(cfg.ny);
  let nxs = ispace<int>(cfg.nx);
  let nocts = ispace<int>(cfg.noct);
  let nangs = ispace<int>(cfg.nang);

  // For all buffers:
  for t in nts {
    // For all energy groups:
    for g in ngs {
      // For all cells:
      for z in nzs {
        for y in nys {
          for x in nxs {
            let c0 = {t: t, g: g, x: x, y: y, z: z, n: 0, m: 0};

            // block ID
            let b = cell_block_id(c0, cfg);
            let bi = block_id_to_int(b, cfg);

            // For all octants and angles:
            for n in nocts {
              for m in nangs {
                // cell ID
                let c = c0{n: n, m: m};
                let ci = cell_id_to_int(c, cfg);
                result = color(result, ci, bi);
              }
            }
          }
        }
      }
    }
  }

  return result;
}

task color_faces(is_faces: ispace<int>, d: int, cfg: config): coloring<is_faces>
{
  var result = coloring<is_faces>();

  var nx = cfg.nx;
  if (d == 0) {
    nx = 1;
  }
  var ny = cfg.ny;
  if (d == 1) {
    ny = 1;
  }
  var nz = cfg.nz;
  if (d == 2) {
    nz = 1;
  }

  let ngs = ispace<int>(cfg.ng);
  let nzs = ispace<int>(nz);
  let nys = ispace<int>(ny);
  let nxs = ispace<int>(nx);
  let nocts = ispace<int>(cfg.noct);
  let nangs = ispace<int>(cfg.nang);

  // For all energy groups:
  for g in ngs {
    // For all cells:
    for z in nzs {
      for y in nys {
        for x in nxs {
          let f0 = {d: d, g: g, x: x, y: y, z: z, n: 0, m: 0};

          // block ID
          let b = face_block_id(f0, cfg);
          let bi = block_id_to_int(b, cfg);

          // For all octants and angles:
          for n in nocts {
            for m in nangs {
              // cell ID
              let f = f0{n: n, m: m};
              let fi = face_id_to_int(f, cfg);
              result = color(result, fi, bi);
            }
          }
        }
      }
    }
  }

  return result;
}

///
/// Input Validation
///

task validate_config(cfg: config)
{
  assert cfg.nmom >= 1 && cfg.nmom <= 4;
  if (cfg.ndim == 1) {
    assert cfg.noct == 2;
    assert cfg.cmom == cfg.nmom;
  }
  if (cfg.ndim == 2) {
    assert cfg.noct == 4;
    assert cfg.cmom == cfg.nmom*(cfg.nmom + 1)/2;
  }
  if (cfg.ndim == 3) {
    assert cfg.noct == 8;
    assert cfg.cmom == cfg.nmom*cfg.nmom;
  }

  if (cfg.ndim < 3) {
    assert cfg.nz == 1;
    assert cfg.nbz == 1;
    assert cfg.ncz == 1;
  }
  if (cfg.ndim < 2) {
    assert cfg.ny == 1;
    assert cfg.nby == 1;
    assert cfg.ncy == 1;
  }
  assert cfg.nx % cfg.nbx == 0;
  assert cfg.ny % cfg.nby == 0;
  assert cfg.nz % cfg.nbz == 0;
  assert cfg.nx == cfg.nbx * cfg.ncx;
  assert cfg.ny == cfg.nby * cfg.ncy;
  assert cfg.nz == cfg.nbz * cfg.ncz;
}

///
/// Simulation Main Loop
///

task simulate(cfg: config)
{
  // Validate input configuration.
  validate_config(cfg);

  // Allocate cell-centered fluxes.
  let is_cells = ispace<int>(2*cfg.ng*cfg.nx*cfg.ny*cfg.nz*cfg.noct*cfg.nang);
  let is_cells_c = color_cells(is_cells, cfg);
  let is_cells_p = partition<is_cells, disjoint>(is_cells_c);
  let cells = array<is_cells, double>();

  // Allocate face-centered fluxes.
  let is_faces_yz = ispace<int>(cfg.ng*cfg.ny*cfg.nz*cfg.noct*cfg.nang);
  let is_faces_yz_c = color_faces(is_faces_yz, 0, cfg);
  let is_faces_yz_p = partition<is_faces_yz, disjoint>(is_faces_yz_c);
  let faces_yz = array<is_faces_yz, double>();

  let is_faces_xz = ispace<int>(cfg.ng*cfg.nx*cfg.nz*cfg.noct*cfg.nang);
  let is_faces_xz_c = color_faces(is_faces_xz, 1, cfg);
  let is_faces_xz_p = partition<is_faces_xz, disjoint>(is_faces_xz_c);
  let faces_xz = array<is_faces_xz, double>();

  let is_faces_xy = ispace<int>(cfg.ng*cfg.nx*cfg.ny*cfg.noct*cfg.nang);
  let is_faces_xy_c = color_faces(is_faces_xy, 2, cfg);
  let is_faces_xy_p = partition<is_faces_xy, disjoint>(is_faces_xy_c);
  let faces_xy = array<is_faces_xy, double>();

  // TODO
  // Allocate sources.
  // let is_source = ispace<int>(2*cfg.ng*cfg.nx*cfg.ny*cfg.nz*cfg.cmom);
  // let is_source_c = color_source(is_source, cfg);
  // let is_source_p = partition<is_source, disjoint>(is_source_c);
  // let source = array<is_source, double>();

  // Allocate time-absorption coefficient.
  let is_vdelt = ispace<int>(cfg.ng);
  let vdelt = array<is_vdelt, double>();

  // Initialize cells and constants.
  initialize_cells(is_cells, cells);
  initialize_vdelt(is_vdelt, vdelt);

  let nts = ispace<int>(cfg.nt);
  let ngs = ispace<int>(cfg.ng);
  let nocts = ispace<int>(cfg.noct);
  let nbzs = ispace<int>(cfg.nbz);
  let nbys = ispace<int>(cfg.nby);
  let nbxs = ispace<int>(cfg.nbx);

  // Main loop:
  for t in nts {
    let t0 = (t + 1)%2; // previous time buffer
    let t1 = t%2;       // current time buffer
    var dt = -1;        // direction of time buffer update
    if (t1 > t0) {
      dt = 1;
    }

    // Initialize faces with boundary conditions.
    initialize_faces(is_faces_yz, faces_yz);
    initialize_faces(is_faces_xz, faces_xz);
    initialize_faces(is_faces_xy, faces_xy);

    // For all energy groups:
    for g in ngs {
      // For all octants:
      for oct in nocts {
        // Determine directions for each octant.
        var dx = 0;
        if (oct%2 == 0) {
          dx = 1;
        } else {
          dx = -1;
        }

        var dy = 0;
        if (cfg.ndim >= 2) {
          if ((oct/2)%2 == 0) {
            dy = 1;
          } else {
            dy = -1;
          }
        }

        var dz = 0;
        if (cfg.ndim >= 3) {
          if ((oct/2/2)%2 == 0) {
            dz = 1;
          } else {
            dz = -1;
          }
        }

        // Iterate spacial chunks from initial to opposite corner.
        for bz in nbzs {
          var bz = bz;
          if (dz < 0) {
            bz = cfg.nbz - bz - 1;
          }
          for by in nbys {
            var by = by;
            if (dy < 0) {
              by = cfg.nby - by - 1;
            }
            for bx in nbxs {
              var bx = bx;
              if (dx < 0) {
                bx = cfg.nbx - bx - 1;
              }

              // Sweep each block of cells.
              let b0 = {t: t0, g: g, bx: bx, by: by, bz: bz};
              let bi0 = block_id_to_int(b0, cfg);
              let is_cells_t0 = is_cells_p[bi0];
              let cells_t0 = cells[is_cells_t0];

              let b1 = {t: t1, g: g, bx: bx, by: by, bz: bz};
              let bi1 = block_id_to_int(b1, cfg);
              let is_cells_t1 = is_cells_p[bi1];
              let cells_t1 = cells[is_cells_t1];

              if (cfg.ndim == 1) {
                let byz = project_block_id_to_face(b0, 0, cfg);
                let biyz = block_id_to_int(byz, cfg);
                let is_faces_yz = is_faces_yz_p[biyz];
                let faces_yz = faces_yz[is_faces_yz];

                sweep1d(b0, b1,
                        is_cells_t0, cells_t0,
                        is_cells_t1, cells_t1,
                        is_faces_yz, faces_yz,
                        vdelt[g],
                        dt, dx,
                        cfg);
              }
              if (cfg.ndim == 2) {
                assert false;
              }
              if (cfg.ndim == 3) {
                assert false;
              }
            }
          }
        }
      }
    }
  }
}

///
/// Test Harness
///

task test1d(nt: int, ng: int, nx: int, nang: int, nmom: int, nbx: int)
{
  let cfg: config = {
    nt:   nt,
    ndim: 1,
    ng:   ng,
    nx:   nx,
    ny:   1,
    nz:   1,
    noct: 2,
    nang: nang,
    nmom: nmom,
    cmom: nmom,
    nbx:  nbx,
    nby:  1,
    nbz:  1,
    ncx:  nx / nbx,
    ncy:  1,
    ncz:  1,
  };

  simulate(cfg);
}

task test2d(nt: int, ng: int, nx: int, ny: int, nang: int, nmom: int,
            nbx: int, nby: int)
{
  let cfg: config = {
    nt:   nt,
    ndim: 2,
    ng:   ng,
    nx:   nx,
    ny:   ny,
    nz:   1,
    noct: 4,
    nang: nang,
    nmom: nmom,
    cmom: nmom*(nmom + 1)/2,
    nbx:  nbx,
    nby:  nby,
    nbz:  1,
    ncx:  nx / nbx,
    ncy:  ny / nby,
    ncz:  1,
  };

  simulate(cfg);
}

task test3d(nt: int, ng: int, nx: int, ny: int, nz: int, nang: int, nmom: int,
            nbx: int, nby: int, nbz: int)
{
  let cfg: config = {
    nt:   nt,
    ndim: 3,
    ng:   ng,
    nx:   nx,
    ny:   ny,
    nz:   nz,
    noct: 8,
    nang: nang,
    nmom: nmom,
    cmom: nmom*nmom,
    nbx:  nbx,
    nby:  nby,
    nbz:  nbz,
    ncx:  nx / nbx,
    ncy:  ny / nby,
    ncz:  nz / nbz,
  };

  simulate(cfg);
}

task main()
{
  test1d(1, 4, 8, 16, 1, 2);
  // test2d(1, 4, 8, 8, 4, 1, 2, 2);
  // test3d(1, 1, 8, 8, 8, 2, 1, 2, 2, 2);
}
