/* Copyright 2014 Stanford University and Los Alamos National Security, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

struct circuit_node
{
  voltage: double,
  current: double,
  charge: double,
  capacitance: double,
  piece_id: int,
}

struct circuit_wire<rn: region<circuit_node>,
                    rg: region<circuit_node>>
{
  in_node: circuit_node@rn,
  out_node: circuit_node@(rn, rg),
  resistance: double,
  current: double,
}

struct node_list<rn: region<circuit_node>,
                 rl: region<node_list<rn, rl>>>
{
  node: circuit_node@rn,
  next: node_list<rn, rl>@rl,
}

struct wire_list<rn: region<circuit_node>,
                 rg: region<circuit_node>,
                 rw: region<circuit_wire<rn, rg>>,
                 rl: region<wire_list<rn, rg, rw, rl>>>
{
  wire: circuit_wire<rn, rg>@rw,
  next: wire_list<rn, rg, rw, rl>@rl,
}

struct circuit_piece<rn: region<circuit_node>,
                     rw: region<circuit_wire<?, ?>>,
                     rnl: region<node_list<?, rnl>>,
                     rwl: region<wire_list<?, ?, ?, rwl>>>
                    [rpn: region<circuit_node>,
                     rg: region<circuit_node>,
                     rpw: region<circuit_wire<?, ?>>]
  , rpn <= rn
  , rg <= rn
  , rpw <= rw
{
  wires: wire_list<rpn, rg, rpw, rwl>@rwl,
  nodes: node_list<rpn, rnl>@rnl,
}

task calc_new_currents(rn: region<circuit_node>,
                       rg: region<circuit_node>,
                       rw: region<circuit_wire<rn, rg>>,
                       rnl: region<node_list<rn, rnl>>,
                       rwl: region<wire_list<rn, rg, rw, rwl>>,
                       wires: wire_list<rn, rg, rw, rwl>@rwl)
  , reads(rn, rg, rw, rnl, rwl)
  , writes(rw)
{
  while (!isnull(wires)) {
    let wire = wires->wire;
    let in_node = wire->in_node;
    let out_node = wire->out_node;
    wire->current = (in_node->voltage - out_node->voltage) / wire->resistance;
    wires = wires->next;
  }
}

task distribute_charge(rn: region<circuit_node>,
                       rg: region<circuit_node>,
                       rw: region<circuit_wire<rn, rg>>,
                       rnl: region<node_list<rn, rnl>>,
                       rwl: region<wire_list<rn, rg, rw, rwl>>,
                       wires: wire_list<rn, rg, rw, rwl>@rwl)
  , reads(rw, rnl, rwl)
  , reduces<+>(rn.charge, rg.charge)
  // need atomic coherence on rn, rg
{
  while (!isnull(wires)) {
    let wire = wires->wire;
    let in_node = wire->in_node;
    let out_node = wire->out_node;
    in_node->charge += wire->current;
    out_node->charge += wire->current;
    wires = wires->next;
  }
}

task update_voltage(rn: region<circuit_node>,
                    rnl: region<node_list<rn, rnl>>,
                    nodes: node_list<rn, rnl>@rnl)
  , reads(rn, rnl)
  , writes(rn)
{
  while (!isnull(nodes)) {
    let node = nodes->node;
    node->voltage = node->charge / node->capacitance;
    nodes = nodes->next;
  }
}

task execute_time_steps(rn: region<circuit_node>,
                        rw: region<circuit_wire<?, ?>>,
                        rnl: region<node_list<?, rnl>>,
                        rwl: region<wire_list<?, ?, ?, rwl>>,
                        p0: circuit_piece<rn, rw, rnl, rwl>,
                        p1: circuit_piece<rn, rw, rnl, rwl>,
                        steps: int)
  , reads(rn, rw, rnl, rwl)
  , writes(rn, rw)
{
  while (steps > 0) {
    unpack p0 as piece0: circuit_piece<rn, rw, rnl, rwl>[rn0, rg0, rw0];
    unpack p1 as piece1: circuit_piece<rn, rw, rnl, rwl>[rn1, rg1, rw1];
    calc_new_currents(rn0, rg0, rw0, rnl, rwl, piece0.wires);
    calc_new_currents(rn1, rg1, rw1, rnl, rwl, piece1.wires);
    distribute_charge(rn0, rg0, rw0, rnl, rwl, piece0.wires);
    distribute_charge(rn1, rg1, rw1, rnl, rwl, piece1.wires);
    update_voltage(rn0, rnl, piece0.nodes);
    update_voltage(rn1, rnl, piece1.nodes);
    steps -= 1;
  }
}

task build_piece_node_list(rn: region<circuit_node>,
                           rpn: region<circuit_node>,
                           rnl: region<node_list<?, rnl>>,
                           all_nodes: node_list<rn, rnl>@rnl)
  : node_list<rpn, rnl>@rnl
  , reads(rnl)
  , writes(rnl)
{
  var result = null<node_list<rpn, rnl>@rnl>();
  while (!isnull(all_nodes)) {
    let node = downregion<rpn>(all_nodes->node);
    if (!isnull(node)) {
      let head = new<node_list<rpn, rnl>@rnl>();
      head->node = node;
      head->next = result;
      result = head;
    }
    all_nodes = all_nodes->next;
  }
  return result;
}

task build_piece_wire_list(rn: region<circuit_node>,
                           rw: region<circuit_wire<?, ?>>,
                           rpn: region<circuit_node>,
                           rpg: region<circuit_node>,
                           rpw: region<circuit_wire<?, ?>>,
                           rwl: region<wire_list<?, ?, ?, rwl>>,
                           all_wires: wire_list<rn, rn, rw, rwl>@rwl)
  : wire_list<rpn, rpg, rpw, rwl>@rwl
  , reads(rw, rwl)
  , writes(rw, rwl)
{
  var result = null<wire_list<rpn, rpg, rpw, rwl>@rwl>();
  while (!isnull(all_wires)) {
    let wire = downregion<rpw>(all_wires->wire);
    if (!isnull(wire)) {
      let old_wire = all_wires->wire;
      let new_wire = new<circuit_wire<rpn, rpg>@rpw>();
      assert !isnull(downregion<rpn>(old_wire->in_node));
      assert !isnull(downregion<rpn, rpg>(old_wire->out_node));
      *downregion<rw>(new_wire) = (*old_wire){
        in_node: downregion<rpn>(old_wire->in_node),
        out_node: downregion<rpn, rpg>(old_wire->out_node),
      };

      let head = new<wire_list<rpn, rpg, rpw, rwl>@rwl>();
      head->wire = new_wire;
      head->next = result;
      return head;
    }
    all_wires = all_wires->next;
  }
  return result;
}

task owned_node_coloring(rn: region<circuit_node>,
                         rnl: region<node_list<?, rnl>>,
                         all_nodes: node_list<rn, rnl>@rnl)
  : coloring<rn>
  , reads(rn, rnl)
{
  var owned_node_map = coloring<rn>();
  var elt = all_nodes;
  while (!isnull(elt)) {
    owned_node_map = color(owned_node_map, elt->node, elt->node->piece_id);
    elt = elt->next;
  }
  return owned_node_map;
}

task ghost_node_coloring(rn: region<circuit_node>,
                         rw: region<circuit_wire<?, ?>>,
                         rwl: region<wire_list<?, ?, ?, rwl>>,
                         all_wires: wire_list<rn, rn, rw, rwl>@rwl)
  : coloring<rn>
  , reads(rn, rw, rwl)
{
  var ghost_node_map = coloring<rn>();
  var elt = all_wires;
  while (!isnull(elt)) {
    let in_node = elt->wire->in_node;
    let out_node = elt->wire->out_node;
    if (in_node->piece_id != out_node->piece_id) {
      ghost_node_map = color(ghost_node_map, downregion<rn>(out_node), in_node->piece_id);
    }
    elt = elt->next;
  }
  return ghost_node_map;
}

task wire_coloring(rn: region<circuit_node>,
                   rw: region<circuit_wire<?, ?>>,
                   rwl: region<wire_list<?, ?, ?, rwl>>,
                   all_wires: wire_list<rn, rn, rw, rwl>@rwl)
  : coloring<rw>
  , reads(rn, rw, rwl)
{
  var wire_map = coloring<rw>();
  var elt = all_wires;
  while (!isnull(elt)) {
    wire_map = color(wire_map, elt->wire, elt->wire->in_node->piece_id);
    elt = elt->next;
  }
  return wire_map;
}

// This task is a proxy for calling METIS.
task extern_metis(rn: region<circuit_node>,
                  rw: region<circuit_wire<?, ?>>,
                  rnl: region<node_list<?, rnl>>,
                  rwl: region<wire_list<?, ?, ?, rwl>>,
                  all_nodes: node_list<rn, rnl>@rnl,
                  all_wires: wire_list<rn, rn, rw, rwl>@rwl)
  , reads(rn, rw, rnl, rwl)
  , writes(rn, rw, rnl, rwl)
{
  // Hack: Simulate METIS by alternating colors for every other node.
  var nodes = all_nodes;
  while (!isnull(nodes)) {
    let node = nodes->node;
    node->piece_id = 0;
    nodes = nodes->next;

    if (!isnull(nodes)) {
      let node = nodes->node;
      node->piece_id = 1;
      nodes = nodes->next;
    }
  }
}

task simulate_circuit(rn: region<circuit_node>,
                      rw: region<circuit_wire<?, ?>>,
                      rnl: region<node_list<?, rnl>>,
                      rwl: region<wire_list<?, ?, ?, rwl>>,
                      all_nodes: node_list<rn, rnl>@rnl,
                      all_wires: wire_list<rn, rn, rw, rwl>@rwl,
                      steps: int)
  , reads(rn, rw, rnl, rwl)
  , writes(rn, rw, rnl, rwl)
{
  // Use METIS to decide how to partition circuit.
  extern_metis(rn, rw, rnl, rwl, all_nodes, all_wires);

  // Create colorings to describe METIS results to Legion.
  let owned_node_map = owned_node_coloring(rn, rnl, all_nodes);
  let ghost_node_map = ghost_node_coloring(rn, rw, rwl, all_wires);
  let wire_map = wire_coloring(rn, rw, rwl, all_wires);

  // Disjoint partition for the owned nodes of each piece.
  let owned_node_part = partition<rn, disjoint>(owned_node_map);
  let rn0 = owned_node_part[0];
  let rn1 = owned_node_part[1];
  // Aliased partition for ghost nodes of each piece.
  let ghost_node_part = partition<rn, aliased>(ghost_node_map);
  let rg0 = ghost_node_part[0];
  let rg1 = ghost_node_part[1];
  // Disjoint partition for the owned wires of each piece
  let wire_part = partition<rw, disjoint>(wire_map);
  let rw0 = wire_part[0];
  let rw1 = wire_part[1];

  // Create region relationships for circuit pieces.
  let nodes0 = build_piece_node_list(rn, rn0, rnl, all_nodes);
  let wires0 = build_piece_wire_list(rn, rw, rn0, rg0, rw0, rwl, all_wires);
  let piece0 = pack {wires: wires0, nodes: nodes0}
                 as circuit_piece<rn, rw, rnl, rwl>[rn0, rg0, rw0];

  let nodes1 = build_piece_node_list(rn, rn1, rnl, all_nodes);
  let wires1 = build_piece_wire_list(rn, rw, rn1, rg1, rw1, rwl, all_wires);
  let piece1 = pack {wires: wires1, nodes: nodes1}
                 as circuit_piece<rn, rw, rnl, rwl>[rn1, rg1, rw1];

  // Do actual (parallel) simulation.
  execute_time_steps(rn, rw, rnl, rwl, piece0, piece1, steps);
}

task rand(i: int, m: int): int
{
  let f = 6983;
  let a = 7867;
  let n = 6299;

  var s = 6317;
  while (i >= 0) {
    s = (s * f + a) % n;
    i -= 1;
  }

  return s % m;
}

task test(n: int, steps: int)
{
  let rn = region<circuit_node>(n);
  let rw = region<circuit_wire<?, ?>>(2*n);
  let rnl = region<node_list<?, rnl>>(4*n);
  let rwl = region<wire_list<?, ?, ?, rwl>>(4*n);

  var nodes = null<node_list<rn, rnl>@rnl>();
  var i = 0;
  while (i < n) {
    let node = new<circuit_node@rn>();
    *node = {voltage: 1.0, current: 1.0, charge: 1.0, capacitance: 1.0, piece_id: 0};

    let nodes_head = new<node_list<rn, rnl>@rnl>();
    *nodes_head = {node: node, next: nodes};
    nodes = nodes_head;

    i += 1;
  }

  var wires = null<wire_list<rn, rn, rw, rwl>@rwl>();
  var i = 0;
  while (i < 2*n) {
    var in_node_id = i % n;
    var out_node_id = rand(i, n);

    var in_node = nodes;
    while (in_node_id > 0) {
      in_node = in_node->next;
      in_node_id -= 1;
    }

    var out_node = nodes;
    while (out_node_id > 0) {
      out_node = out_node->next;
      out_node_id -= 1;
    }

    assert !isnull(in_node);
    assert !isnull(out_node);

    let wire = new<circuit_wire<rn, rn>@rw>();
    *wire = {
      in_node: in_node->node,
      out_node: downregion<rn, rn>(out_node->node),
      resistance: 1.0,
      current: 1.0};

    let wires_head = new<wire_list<rn, rn, rw, rwl>@rwl>();
    *wires_head = {wire: wire, next: wires};

    i += 1;
  }

  simulate_circuit(rn, rw, rnl, rwl, nodes, wires, steps);
}

task main()
{
  test(4, 16);
  test(16, 8);
  test(64, 4);
}
