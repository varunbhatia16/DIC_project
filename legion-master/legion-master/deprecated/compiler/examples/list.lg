/* Copyright 2014 Stanford University and Los Alamos National Security, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

struct list<r: region<list<r>>>
{
  data: int,
  next: list<r>@r,
}

task make_list(r: region<list<r>>, x: int): list<r>@r
  , writes(r)
{
  if (x < 0) {
    return null<list<r>@r>();
  } else {
    let head = new<list<r>@r>();
    let tail = make_list(r, x - 1);
    head->data = x;
    head->next = tail;
    return head;
  }
}

// sum the list with recursion
task sum_list1(r: region<list<r>>, l: list<r>@r): int
  , reads(r)
{
  if (isnull(l)) {
    return 0;
  } else {
    return l->data + sum_list1(r, l->next);
  }
}

// sum the list with a for loop
task sum_list2(r: region<list<r>>): int
  , reads(r)
{
  var a = 0;
  for n in r {
    a += n->data;
  }
  return a;
}

// sum the list with a while loop
task sum_list3(r: region<list<r>>, l: list<r>@r): int
  , reads(r)
{
  var a = 0;
  while (!isnull(l)) {
    a += l->data;
    l = l->next;
  }
  return a;
}

task main()
{
  let r = region<list<r>>(6);
  let l = make_list(r, 5);
  assert sum_list1(r, l) == 15;
  assert sum_list2(r) == 15;
  assert sum_list3(r, l) == 15;
}
