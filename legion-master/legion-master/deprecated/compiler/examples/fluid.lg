/* Copyright 2014 Stanford University and Los Alamos National Security, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

struct point
{
  buffer_phase: int,
  x: int,
  p: int,
}

struct vector
{
  x: float,
  y: float,
  z: float,
}

struct particle
{
  p: vector,
  hv: vector,
  v: vector,
  a: vector,
  density: float,
}

task point_to_int(p: point, ncx: int, np: int): int
{
  return (p.buffer_phase*ncx + p.x)*np + p.p;
}

task int_to_point(i: int, ncx: int, np: int): point
{
  let p = i % np;
  let x = (i / np) % ncx;
  let buffer_phase = (i / np) / ncx;
  return {buffer_phase: buffer_phase, x: x, p: p};
}

task init_simulation(
  owned_is: ispace<int>, owned: array<owned_is, particle>,
  ghost_bot_is: ispace<int>, ghost_bot: array<ghost_bot_is, particle>,
  ghost_top_is: ispace<int>, ghost_top: array<ghost_top_is, particle>,
  phase: int)
  , writes(owned, ghost_top, ghost_bot)
{
  let zero = {x: 0.0f, y: 0.0f, z: 0.0f};
  for i in owned_is {
    owned[i] = {p: zero, hv: zero, v: zero, a: zero, density: 0.0f};
  }
  for i in ghost_top_is {
    ghost_top[i] = {p: zero, hv: zero, v: zero, a: zero, density: 0.0f};
  }
  for i in ghost_bot_is {
    ghost_bot[i] = {p: zero, hv: zero, v: zero, a: zero, density: 0.0f};
  }
}

task init_step(
  last_owned_is: ispace<int>, last_owned: array<last_owned_is, particle>,
  owned_is: ispace<int>, owned: array<owned_is, particle>,
  ghost_bot_is: ispace<int>, ghost_bot: array<ghost_bot_is, particle>,
  ghost_top_is: ispace<int>, ghost_top: array<ghost_top_is, particle>,
  phase: int)
  , reads(last_owned, ghost_top, ghost_bot)
  , writes(owned, ghost_top, ghost_bot)
{
  // Move particles that have wandered outside of their cells into the
  // cells they are supposed to be. Ghost cells in this phase are used
  // to scatter particles that need to be moved into cells owned by
  // different parts of computation.

  // Involves a stencil operation over owned cells, which means that
  // accesses to cells have to be checked dynamically to see which
  // region they land in (owned or ghost, and if ghost which
  // direction).
}

task rebuild_reduce(
  owned_is: ispace<int>, owned: array<owned_is, particle>,
  ghost_bot_is: ispace<int>, ghost_bot: array<ghost_bot_is, particle>,
  ghost_top_is: ispace<int>, ghost_top: array<ghost_top_is, particle>,
  phase: int)
  , reads(owned, ghost_top, ghost_bot)
  , writes(owned, ghost_top, ghost_bot)
{
  // Move particles that have wandered outside of their cells into the
  // cells they are supposed to be. Ghost cells in this phase are used
  // to gather particles that need to be moved from cells owned by
  // different parts of the computation.

  // Involves a stencil operation over owned cells, which means that
  // accesses to cells have to be checked dynamically to see which
  // region they land in (owned or ghost, and if ghost which
  // direction).
}

task scatter_densities(
  owned_is: ispace<int>, owned: array<owned_is, particle>,
  ghost_bot_is: ispace<int>, ghost_bot: array<ghost_bot_is, particle>,
  ghost_top_is: ispace<int>, ghost_top: array<ghost_top_is, particle>,
  phase: int)
  , reads(owned, ghost_top, ghost_bot)
  , writes(owned, ghost_top, ghost_bot)
{
  // Calculate density for each particle. Ghost cells in this phase
  // are used to scatter density values from neighboring parts of the
  // computation.

  // Involves a stencil operation over owned cells, which means that
  // accesses to cells have to be checked dynamically to see which
  // region they land in (owned or ghost, and if ghost which
  // direction).
}

task gather_forces(
  owned_is: ispace<int>, owned: array<owned_is, particle>,
  ghost_bot_is: ispace<int>, ghost_bot: array<ghost_bot_is, particle>,
  ghost_top_is: ispace<int>, ghost_top: array<ghost_top_is, particle>,
  phase: int)
  , reads(owned, ghost_top, ghost_bot)
  , writes(owned, ghost_top, ghost_bot)
{
  // Calculate acceleration for each particle. Ghost cells in this
  // phase are used to gather density values from neighboring parts of
  // the computation.

  // Involves a stencil operation over owned cells, which means that
  // accesses to cells have to be checked dynamically to see which
  // region they land in (owned or ghost, and if ghost which
  // direction).
}

task owned_color(bx: int, buffer_phase: int, nbx: int): int
{
  return buffer_phase*nbx + bx;
}

task ghost_color(bx: int, dir: int, buffer_phase: int, edge_phase: int, nbx: int): int
{
  let dshift = 1;
  if (edge_phase == 0) {
    // For phase 0, return own ghost block.
    return (buffer_phase*nbx + bx)*3 + dir + dshift;
  }
  if (edge_phase == 1) {
    if ((bx == 0 && dir == -1) || (bx == nbx - 1 && dir == 1)) {
      // For boundary blocks in phase 1, return own ghost
      // block. (There is no neighbor.)
      return (buffer_phase*nbx + bx)*3 + dir + dshift;
    }
    // For phase 1, return neighbor's opposite-direction ghost block.
    return (buffer_phase*nbx + bx + dir)*3 - dir + dshift;
  }
  assert false;
}

// Colors all owned and ghost cells.
task all_owned_ghost_coloring(
  cells_is: ispace<int>,
  nx: int, nbx: int, np: int, ncx: int)
  : coloring<cells_is>
{
  var cells_coloring = coloring<cells_is>();

  // Colors to assign for owned and ghost cells.
  let owned = 0;
  let ghost = 1;

  let blocksize = nx/nbx;
  let buffer_is = ispace<int>(2);
  let block_is = ispace<int>(nbx);
  let block_interior_is = ispace<int>(blocksize);
  let particle_is = ispace<int>(np);
  for buffer_phase in buffer_is {
    for bx in block_is {
      // Ghost cells.
      for p in particle_is {
        let pt = {buffer_phase: buffer_phase, x: bx*(blocksize + 2), p: p};
        cells_coloring = color(
          cells_coloring,
          point_to_int(pt, ncx, np),
          ghost);
      }

      // Owned cells.
      for cx in block_interior_is {
        for p in particle_is {
          let pt = {buffer_phase: buffer_phase, x: bx*(blocksize + 2) + cx + 1, p: p};
          cells_coloring = color(
            cells_coloring,
            point_to_int(pt, ncx, np),
            owned);
        }
      }

      // Ghost cells.
      for p in particle_is {
        let pt = {buffer_phase: buffer_phase, x: (bx + 1)*(blocksize + 2) - 1, p: p};
        cells_coloring = color(
          cells_coloring,
          point_to_int(pt, ncx, np),
          ghost);
      }
    }
  }
  return cells_coloring;
}

// Colors owned cells by block.
task owned_blocks_coloring(cells_is: ispace<int>, nx: int, nbx: int, np: int, ncx: int)
  : coloring<cells_is>
{
  var owned_coloring = coloring<cells_is>();

  let blocksize = nx/nbx;
  let buffer_is = ispace<int>(2);
  let block_is = ispace<int>(nbx);
  let block_interior_is = ispace<int>(blocksize);
  let particle_is = ispace<int>(np);
  for buffer_phase in buffer_is {
    for bx in block_is {
      for cx in block_interior_is {
        for p in particle_is {
          let pt = {buffer_phase: buffer_phase, x: bx*(blocksize + 2) + cx + 1, p: p};
          owned_coloring = color(
            owned_coloring,
            point_to_int(pt, ncx, np),
            owned_color(bx, buffer_phase, nbx));
        }
      }
    }
  }

  return owned_coloring;
}

// Colors ghost cells by block.
task ghost_blocks_coloring(cells_is: ispace<int>, nx: int, nbx: int, np: int, ncx: int)
  : coloring<cells_is>
{
  var ghost_coloring = coloring<cells_is>();

  let blocksize = nx/nbx;
  let buffer_is = ispace<int>(2);
  let block_is = ispace<int>(nbx);
  let particle_is = ispace<int>(np);
  for buffer_phase in buffer_is {
    for bx in block_is {
      for p in particle_is {
        let pt = {buffer_phase: buffer_phase, x: bx*(blocksize + 2), p: p};
        ghost_coloring = color(
          ghost_coloring,
          point_to_int(pt, ncx, np),
          ghost_color(bx, -1, buffer_phase, 0, nbx));
      }

      for p in particle_is {
        let pt = {buffer_phase: buffer_phase, x: (bx + 1)*(blocksize + 2) - 1, p: p};
        ghost_coloring = color(
          ghost_coloring,
          point_to_int(pt, ncx, np),
          ghost_color(bx, 1, buffer_phase, 0, nbx));
      }
    }
  }
  return ghost_coloring;
}

task fluid(nx: int, nbx: int, np: int, steps: int, double_buffer: bool)
{
  assert nx % nbx == 0;

  let ncx = nx + (nbx + 1)*2;

  // Allocate all cells.
  let cells_is = ispace<int>(ncx*np*2);
  let cells = array<cells_is, particle>();

  // Partition cells into owned or ghost cells.
  let cells_coloring = all_owned_ghost_coloring(cells_is, nx, nbx, np, ncx);
  let cells_part = partition<cells_is, disjoint>(cells_coloring);
  let owned_is = cells_part[0];
  let ghost_is = cells_part[1];

  // Partition owned cells into blocks.
  let owned_coloring = owned_blocks_coloring(owned_is, nx, nbx, np, ncx);
  let owned_part = partition<owned_is, disjoint>(owned_coloring);

  // Partition ghost cells into blocks.
  let ghost_coloring = ghost_blocks_coloring(ghost_is, nx, nbx, np, ncx);
  let ghost_part = partition<ghost_is, disjoint>(ghost_coloring);

  // Initialize the simulation.
  let block_is = ispace<int>(nbx);
  for bx in block_is {
    let buffer_phase = 1;
    let edge_phase = 1;
    let owned = owned_part[owned_color(bx, buffer_phase, nbx)];
    let ghost_bot = ghost_part[ghost_color(bx, -1, buffer_phase, edge_phase, nbx)];
    let ghost_top = ghost_part[ghost_color(bx, 1, buffer_phase, edge_phase, nbx)];
    init_simulation(
      owned, cells[owned],
      ghost_bot, cells[ghost_bot],
      ghost_top, cells[ghost_top],
      edge_phase);
  }

  // Simulation main loop.
  let steps_is = ispace<int>(steps);
  for step in steps_is {
    var buffer_phase = 0;
    if (double_buffer) {
      buffer_phase = step % 2;
    }
    let buffer_phase = buffer_phase;

    for bx in block_is {
      let edge_phase = 0;
      let last_owned = owned_part[owned_color(bx, 1 - buffer_phase, nbx)];
      let owned = owned_part[owned_color(bx, buffer_phase, nbx)];
      let ghost_bot = ghost_part[ghost_color(bx, -1, buffer_phase, edge_phase, nbx)];
      let ghost_top = ghost_part[ghost_color(bx, 1, buffer_phase, edge_phase, nbx)];
      init_step(
        last_owned, cells[last_owned],
        owned, cells[owned],
        ghost_bot, cells[ghost_bot],
        ghost_top, cells[ghost_top],
        edge_phase);
    }
    for bx in block_is {
      let edge_phase = 0;
      let owned = owned_part[owned_color(bx, buffer_phase, nbx)];
      let ghost_bot = ghost_part[ghost_color(bx, -1, buffer_phase, edge_phase, nbx)];
      let ghost_top = ghost_part[ghost_color(bx, 1, buffer_phase, edge_phase, nbx)];
      rebuild_reduce(
        owned, cells[owned],
        ghost_bot, cells[ghost_bot],
        ghost_top, cells[ghost_top],
        edge_phase);
    }
    for bx in block_is {
      let edge_phase = 1;
      let owned = owned_part[owned_color(bx, buffer_phase, nbx)];
      let ghost_bot = ghost_part[ghost_color(bx, -1, buffer_phase, edge_phase, nbx)];
      let ghost_top = ghost_part[ghost_color(bx, 1, buffer_phase, edge_phase, nbx)];
      scatter_densities(
        owned, cells[owned],
        ghost_bot, cells[ghost_bot],
        ghost_top, cells[ghost_top],
        edge_phase);
    }
    for bx in block_is {
      let edge_phase = 0;
      let owned = owned_part[owned_color(bx, buffer_phase, nbx)];
      let ghost_bot = ghost_part[ghost_color(bx, -1, buffer_phase, edge_phase, nbx)];
      let ghost_top = ghost_part[ghost_color(bx, 1, buffer_phase, edge_phase, nbx)];
      gather_forces(
        owned, cells[owned],
        ghost_bot, cells[ghost_bot],
        ghost_top, cells[ghost_top],
        edge_phase);
    }
  }
}

task main()
{
  fluid(10, 2, 16, 4, true);
  fluid(20, 2, 16, 4, true);
  fluid(20, 4, 16, 4, true);
  fluid(20, 5, 16, 2, false);
}
