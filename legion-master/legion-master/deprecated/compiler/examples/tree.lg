/* Copyright 2014 Stanford University and Los Alamos National Security, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* From The Art of Computer Programming, Volume 2: Seminumerical
 * Algorithms, section 3.2.1.
 */
task random(bits: uint, rounds: int): uint
{
  assert rounds > 0;
  assert 1u <= bits && bits <= 32u;

  var seed = 1374614538u;
  while (rounds > 0) {
    seed = (seed * 0x5DEECE66Du + 0xBu) & ((1u << 48u) - 1u);
    rounds -= 1;
  }
  return (seed >> (48u - bits));
}

struct list<ra: region<list<ra>>>
{
  data: int,
  next: list<ra>@ra,
}

task make_list(rl: region<list<rl>>, x: int)
  : list<rl>@rl
  , writes(rl)
{
  if (x < 0) {
    return null<list<rl>@rl>();
  } else {
    let head = new<list<rl>@rl>();
    let tail = make_list(rl, x - 1);
    head->data = int(random(16u, x + 1));
    head->next = tail;
    return head;
  }
}

task sum_list(rl: region<list<rl>>, l: list<rl>@rl): int
  , reads(rl)
{
  var a = 0;
  while (!isnull(l)) {
    a += l->data;
    l = l->next;
  }
  return a;
}

struct tree<rb: region<tree<?>>>[rc: region<tree<?>>, rd: region<tree<?>>]
  , rc <= rb
  , rd <= rb
  , rc * rd
{
  data: int,
  lhs: tree<rc>@rc,
  rhs: tree<rd>@rd,
}

task make_tree(re: region<list<re>>, rf: region<tree<?>>,
               l: list<re>@re, min: int, max: int)
  : tree<rf>@rf
  , reads(re, rf), writes(rf)
{
  if (isnull(l)) {
    return null<tree<rf>@rf>();
  } else {
    if (l->data < min || l->data > max) {
      return make_tree(re, rf, l->next, min, max);
    } else {
      let root = new<tree<rf>@rf>();
      let p = partition<rf, disjoint>(coloring<rf>());
      let rg = p[0];
      let rh = p[1];
      let lhs = make_tree(re, rg, l->next, min, l->data);
      let rhs = make_tree(re, rh, l->next, l->data, max);
      *root = pack {data: l->data, lhs: lhs, rhs: rhs}
                as tree<rf>[rg, rh];
      return root;
    }
  }
}

task reverse_tree(ri: region<tree<?>>, root: tree<ri>@ri)
  : tree<ri>@ri
  , reads(ri), writes(ri)
{
  if (isnull(root)) {
    return null<tree<ri>@ri>();
  } else {
    unpack *root as u: tree<ri>[rj, rk];
    let lhs_r = reverse_tree(rj, u.lhs);
    let rhs_r = reverse_tree(rk, u.rhs);
    *root = pack {data: u.data, lhs: rhs_r, rhs: lhs_r}
              as tree<ri>[rk, rj];
    return root;
  }
}

task sum_tree(rm: region<tree<?>>, root: tree<rm>@rm)
  : int
  , reads(rm)
{
  if (isnull(root)) {
    return 0;
  } else {
    unpack *root as u: tree<rm>[rn, ro];
    let lhs = sum_tree(rn, u.lhs);
    let rhs = sum_tree(ro, u.rhs);
    return root->data + lhs + rhs;
  }
}

task test(n: int)
{
  let rp = region<list<rp>>(n);
  let rq = region<tree<?>>(n);
  let l = make_list(rp, n - 1);
  let t = make_tree(rp, rq, l, 0, 65536);
  let t = reverse_tree(rq, t);
  assert sum_tree(rq, t) == sum_list(rp, l);
}

task main()
{
  test(5);
  test(16);
  test(37);
}
