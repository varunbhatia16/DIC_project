/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: metazht.proto */

#ifndef PROTOBUF_C_metazht_2eproto__INCLUDED
#define PROTOBUF_C_metazht_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1000002 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _Value Value;


/* --- enums --- */


/* --- messages --- */

struct  _Value
{
  ProtobufCMessage base;
  char *id;
  protobuf_c_boolean has_indegree;
  int64_t indegree;
  size_t n_parents;
  char **parents;
  size_t n_children;
  char **children;
  size_t n_datanamelist;
  char **datanamelist;
  size_t n_datasize;
  int64_t *datasize;
  protobuf_c_boolean has_alldatasize;
  int64_t alldatasize;
  protobuf_c_boolean has_tasklength;
  int64_t tasklength;
  protobuf_c_boolean has_numtaskfin;
  int64_t numtaskfin;
  protobuf_c_boolean has_numworksteal;
  int64_t numworksteal;
  protobuf_c_boolean has_numworkstealfail;
  int64_t numworkstealfail;
  protobuf_c_boolean has_numtaskwait;
  int32_t numtaskwait;
  protobuf_c_boolean has_numtaskready;
  int32_t numtaskready;
  protobuf_c_boolean has_numcoreavilable;
  int32_t numcoreavilable;
  protobuf_c_boolean has_numallcore;
  int32_t numallcore;
  protobuf_c_boolean has_outputsize;
  int64_t outputsize;
  protobuf_c_boolean has_submittime;
  int64_t submittime;
};
#define VALUE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&value__descriptor) \
    , NULL, 0,0, 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0 }


/* Value methods */
void   value__init
                     (Value         *message);
size_t value__get_packed_size
                     (const Value   *message);
size_t value__pack
                     (const Value   *message,
                      uint8_t             *out);
size_t value__pack_to_buffer
                     (const Value   *message,
                      ProtobufCBuffer     *buffer);
Value *
       value__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   value__free_unpacked
                     (Value *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Value_Closure)
                 (const Value *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor value__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_metazht_2eproto__INCLUDED */
