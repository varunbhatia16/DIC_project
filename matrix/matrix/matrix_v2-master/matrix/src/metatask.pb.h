// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: metatask.proto

#ifndef PROTOBUF_metatask_2eproto__INCLUDED
#define PROTOBUF_metatask_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_metatask_2eproto();
void protobuf_AssignDesc_metatask_2eproto();
void protobuf_ShutdownFile_metatask_2eproto();

class TaskMsg;

// ===================================================================

class TaskMsg : public ::google::protobuf::Message {
 public:
  TaskMsg();
  virtual ~TaskMsg();

  TaskMsg(const TaskMsg& from);

  inline TaskMsg& operator=(const TaskMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TaskMsg& default_instance();

  void Swap(TaskMsg* other);

  // implements Message ----------------------------------------------

  inline TaskMsg* New() const { return New(NULL); }

  TaskMsg* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TaskMsg& from);
  void MergeFrom(const TaskMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TaskMsg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string taskId = 1;
  bool has_taskid() const;
  void clear_taskid();
  static const int kTaskIdFieldNumber = 1;
  const ::std::string& taskid() const;
  void set_taskid(const ::std::string& value);
  void set_taskid(const char* value);
  void set_taskid(const char* value, size_t size);
  ::std::string* mutable_taskid();
  ::std::string* release_taskid();
  void set_allocated_taskid(::std::string* taskid);

  // required string user = 2;
  bool has_user() const;
  void clear_user();
  static const int kUserFieldNumber = 2;
  const ::std::string& user() const;
  void set_user(const ::std::string& value);
  void set_user(const char* value);
  void set_user(const char* value, size_t size);
  ::std::string* mutable_user();
  ::std::string* release_user();
  void set_allocated_user(::std::string* user);

  // required string dir = 3;
  bool has_dir() const;
  void clear_dir();
  static const int kDirFieldNumber = 3;
  const ::std::string& dir() const;
  void set_dir(const ::std::string& value);
  void set_dir(const char* value);
  void set_dir(const char* value, size_t size);
  ::std::string* mutable_dir();
  ::std::string* release_dir();
  void set_allocated_dir(::std::string* dir);

  // required string cmd = 4;
  bool has_cmd() const;
  void clear_cmd();
  static const int kCmdFieldNumber = 4;
  const ::std::string& cmd() const;
  void set_cmd(const ::std::string& value);
  void set_cmd(const char* value);
  void set_cmd(const char* value, size_t size);
  ::std::string* mutable_cmd();
  ::std::string* release_cmd();
  void set_allocated_cmd(::std::string* cmd);

  // required int64 dataLength = 5;
  bool has_datalength() const;
  void clear_datalength();
  static const int kDataLengthFieldNumber = 5;
  ::google::protobuf::int64 datalength() const;
  void set_datalength(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:TaskMsg)
 private:
  inline void set_has_taskid();
  inline void clear_has_taskid();
  inline void set_has_user();
  inline void clear_has_user();
  inline void set_has_dir();
  inline void clear_has_dir();
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_datalength();
  inline void clear_has_datalength();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr taskid_;
  ::google::protobuf::internal::ArenaStringPtr user_;
  ::google::protobuf::internal::ArenaStringPtr dir_;
  ::google::protobuf::internal::ArenaStringPtr cmd_;
  ::google::protobuf::int64 datalength_;
  friend void  protobuf_AddDesc_metatask_2eproto();
  friend void protobuf_AssignDesc_metatask_2eproto();
  friend void protobuf_ShutdownFile_metatask_2eproto();

  void InitAsDefaultInstance();
  static TaskMsg* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// TaskMsg

// required string taskId = 1;
inline bool TaskMsg::has_taskid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TaskMsg::set_has_taskid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TaskMsg::clear_has_taskid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TaskMsg::clear_taskid() {
  taskid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_taskid();
}
inline const ::std::string& TaskMsg::taskid() const {
  // @@protoc_insertion_point(field_get:TaskMsg.taskId)
  return taskid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TaskMsg::set_taskid(const ::std::string& value) {
  set_has_taskid();
  taskid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TaskMsg.taskId)
}
inline void TaskMsg::set_taskid(const char* value) {
  set_has_taskid();
  taskid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TaskMsg.taskId)
}
inline void TaskMsg::set_taskid(const char* value, size_t size) {
  set_has_taskid();
  taskid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TaskMsg.taskId)
}
inline ::std::string* TaskMsg::mutable_taskid() {
  set_has_taskid();
  // @@protoc_insertion_point(field_mutable:TaskMsg.taskId)
  return taskid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TaskMsg::release_taskid() {
  clear_has_taskid();
  return taskid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TaskMsg::set_allocated_taskid(::std::string* taskid) {
  if (taskid != NULL) {
    set_has_taskid();
  } else {
    clear_has_taskid();
  }
  taskid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), taskid);
  // @@protoc_insertion_point(field_set_allocated:TaskMsg.taskId)
}

// required string user = 2;
inline bool TaskMsg::has_user() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TaskMsg::set_has_user() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TaskMsg::clear_has_user() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TaskMsg::clear_user() {
  user_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user();
}
inline const ::std::string& TaskMsg::user() const {
  // @@protoc_insertion_point(field_get:TaskMsg.user)
  return user_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TaskMsg::set_user(const ::std::string& value) {
  set_has_user();
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TaskMsg.user)
}
inline void TaskMsg::set_user(const char* value) {
  set_has_user();
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TaskMsg.user)
}
inline void TaskMsg::set_user(const char* value, size_t size) {
  set_has_user();
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TaskMsg.user)
}
inline ::std::string* TaskMsg::mutable_user() {
  set_has_user();
  // @@protoc_insertion_point(field_mutable:TaskMsg.user)
  return user_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TaskMsg::release_user() {
  clear_has_user();
  return user_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TaskMsg::set_allocated_user(::std::string* user) {
  if (user != NULL) {
    set_has_user();
  } else {
    clear_has_user();
  }
  user_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user);
  // @@protoc_insertion_point(field_set_allocated:TaskMsg.user)
}

// required string dir = 3;
inline bool TaskMsg::has_dir() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TaskMsg::set_has_dir() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TaskMsg::clear_has_dir() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TaskMsg::clear_dir() {
  dir_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_dir();
}
inline const ::std::string& TaskMsg::dir() const {
  // @@protoc_insertion_point(field_get:TaskMsg.dir)
  return dir_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TaskMsg::set_dir(const ::std::string& value) {
  set_has_dir();
  dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TaskMsg.dir)
}
inline void TaskMsg::set_dir(const char* value) {
  set_has_dir();
  dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TaskMsg.dir)
}
inline void TaskMsg::set_dir(const char* value, size_t size) {
  set_has_dir();
  dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TaskMsg.dir)
}
inline ::std::string* TaskMsg::mutable_dir() {
  set_has_dir();
  // @@protoc_insertion_point(field_mutable:TaskMsg.dir)
  return dir_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TaskMsg::release_dir() {
  clear_has_dir();
  return dir_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TaskMsg::set_allocated_dir(::std::string* dir) {
  if (dir != NULL) {
    set_has_dir();
  } else {
    clear_has_dir();
  }
  dir_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dir);
  // @@protoc_insertion_point(field_set_allocated:TaskMsg.dir)
}

// required string cmd = 4;
inline bool TaskMsg::has_cmd() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TaskMsg::set_has_cmd() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TaskMsg::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TaskMsg::clear_cmd() {
  cmd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_cmd();
}
inline const ::std::string& TaskMsg::cmd() const {
  // @@protoc_insertion_point(field_get:TaskMsg.cmd)
  return cmd_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TaskMsg::set_cmd(const ::std::string& value) {
  set_has_cmd();
  cmd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TaskMsg.cmd)
}
inline void TaskMsg::set_cmd(const char* value) {
  set_has_cmd();
  cmd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TaskMsg.cmd)
}
inline void TaskMsg::set_cmd(const char* value, size_t size) {
  set_has_cmd();
  cmd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TaskMsg.cmd)
}
inline ::std::string* TaskMsg::mutable_cmd() {
  set_has_cmd();
  // @@protoc_insertion_point(field_mutable:TaskMsg.cmd)
  return cmd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TaskMsg::release_cmd() {
  clear_has_cmd();
  return cmd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TaskMsg::set_allocated_cmd(::std::string* cmd) {
  if (cmd != NULL) {
    set_has_cmd();
  } else {
    clear_has_cmd();
  }
  cmd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cmd);
  // @@protoc_insertion_point(field_set_allocated:TaskMsg.cmd)
}

// required int64 dataLength = 5;
inline bool TaskMsg::has_datalength() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TaskMsg::set_has_datalength() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TaskMsg::clear_has_datalength() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TaskMsg::clear_datalength() {
  datalength_ = GOOGLE_LONGLONG(0);
  clear_has_datalength();
}
inline ::google::protobuf::int64 TaskMsg::datalength() const {
  // @@protoc_insertion_point(field_get:TaskMsg.dataLength)
  return datalength_;
}
inline void TaskMsg::set_datalength(::google::protobuf::int64 value) {
  set_has_datalength();
  datalength_ = value;
  // @@protoc_insertion_point(field_set:TaskMsg.dataLength)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_metatask_2eproto__INCLUDED
