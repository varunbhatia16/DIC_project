// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: metamatrix.proto

#ifndef PROTOBUF_metamatrix_2eproto__INCLUDED
#define PROTOBUF_metamatrix_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_metamatrix_2eproto();
void protobuf_AssignDesc_metamatrix_2eproto();
void protobuf_ShutdownFile_metamatrix_2eproto();

class MatrixMsg;

// ===================================================================

class MatrixMsg : public ::google::protobuf::Message {
 public:
  MatrixMsg();
  virtual ~MatrixMsg();

  MatrixMsg(const MatrixMsg& from);

  inline MatrixMsg& operator=(const MatrixMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MatrixMsg& default_instance();

  void Swap(MatrixMsg* other);

  // implements Message ----------------------------------------------

  inline MatrixMsg* New() const { return New(NULL); }

  MatrixMsg* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MatrixMsg& from);
  void MergeFrom(const MatrixMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MatrixMsg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string msgType = 1;
  bool has_msgtype() const;
  void clear_msgtype();
  static const int kMsgTypeFieldNumber = 1;
  const ::std::string& msgtype() const;
  void set_msgtype(const ::std::string& value);
  void set_msgtype(const char* value);
  void set_msgtype(const char* value, size_t size);
  ::std::string* mutable_msgtype();
  ::std::string* release_msgtype();
  void set_allocated_msgtype(::std::string* msgtype);

  // optional string extraInfo = 2;
  bool has_extrainfo() const;
  void clear_extrainfo();
  static const int kExtraInfoFieldNumber = 2;
  const ::std::string& extrainfo() const;
  void set_extrainfo(const ::std::string& value);
  void set_extrainfo(const char* value);
  void set_extrainfo(const char* value, size_t size);
  ::std::string* mutable_extrainfo();
  ::std::string* release_extrainfo();
  void set_allocated_extrainfo(::std::string* extrainfo);

  // optional int64 count = 3;
  bool has_count() const;
  void clear_count();
  static const int kCountFieldNumber = 3;
  ::google::protobuf::int64 count() const;
  void set_count(::google::protobuf::int64 value);

  // repeated string tasks = 4;
  int tasks_size() const;
  void clear_tasks();
  static const int kTasksFieldNumber = 4;
  const ::std::string& tasks(int index) const;
  ::std::string* mutable_tasks(int index);
  void set_tasks(int index, const ::std::string& value);
  void set_tasks(int index, const char* value);
  void set_tasks(int index, const char* value, size_t size);
  ::std::string* add_tasks();
  void add_tasks(const ::std::string& value);
  void add_tasks(const char* value);
  void add_tasks(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& tasks() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_tasks();

  // @@protoc_insertion_point(class_scope:MatrixMsg)
 private:
  inline void set_has_msgtype();
  inline void clear_has_msgtype();
  inline void set_has_extrainfo();
  inline void clear_has_extrainfo();
  inline void set_has_count();
  inline void clear_has_count();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr msgtype_;
  ::google::protobuf::internal::ArenaStringPtr extrainfo_;
  ::google::protobuf::int64 count_;
  ::google::protobuf::RepeatedPtrField< ::std::string> tasks_;
  friend void  protobuf_AddDesc_metamatrix_2eproto();
  friend void protobuf_AssignDesc_metamatrix_2eproto();
  friend void protobuf_ShutdownFile_metamatrix_2eproto();

  void InitAsDefaultInstance();
  static MatrixMsg* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// MatrixMsg

// required string msgType = 1;
inline bool MatrixMsg::has_msgtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MatrixMsg::set_has_msgtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MatrixMsg::clear_has_msgtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MatrixMsg::clear_msgtype() {
  msgtype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_msgtype();
}
inline const ::std::string& MatrixMsg::msgtype() const {
  // @@protoc_insertion_point(field_get:MatrixMsg.msgType)
  return msgtype_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MatrixMsg::set_msgtype(const ::std::string& value) {
  set_has_msgtype();
  msgtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MatrixMsg.msgType)
}
inline void MatrixMsg::set_msgtype(const char* value) {
  set_has_msgtype();
  msgtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MatrixMsg.msgType)
}
inline void MatrixMsg::set_msgtype(const char* value, size_t size) {
  set_has_msgtype();
  msgtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MatrixMsg.msgType)
}
inline ::std::string* MatrixMsg::mutable_msgtype() {
  set_has_msgtype();
  // @@protoc_insertion_point(field_mutable:MatrixMsg.msgType)
  return msgtype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MatrixMsg::release_msgtype() {
  clear_has_msgtype();
  return msgtype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MatrixMsg::set_allocated_msgtype(::std::string* msgtype) {
  if (msgtype != NULL) {
    set_has_msgtype();
  } else {
    clear_has_msgtype();
  }
  msgtype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msgtype);
  // @@protoc_insertion_point(field_set_allocated:MatrixMsg.msgType)
}

// optional string extraInfo = 2;
inline bool MatrixMsg::has_extrainfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MatrixMsg::set_has_extrainfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MatrixMsg::clear_has_extrainfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MatrixMsg::clear_extrainfo() {
  extrainfo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_extrainfo();
}
inline const ::std::string& MatrixMsg::extrainfo() const {
  // @@protoc_insertion_point(field_get:MatrixMsg.extraInfo)
  return extrainfo_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MatrixMsg::set_extrainfo(const ::std::string& value) {
  set_has_extrainfo();
  extrainfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MatrixMsg.extraInfo)
}
inline void MatrixMsg::set_extrainfo(const char* value) {
  set_has_extrainfo();
  extrainfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MatrixMsg.extraInfo)
}
inline void MatrixMsg::set_extrainfo(const char* value, size_t size) {
  set_has_extrainfo();
  extrainfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MatrixMsg.extraInfo)
}
inline ::std::string* MatrixMsg::mutable_extrainfo() {
  set_has_extrainfo();
  // @@protoc_insertion_point(field_mutable:MatrixMsg.extraInfo)
  return extrainfo_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MatrixMsg::release_extrainfo() {
  clear_has_extrainfo();
  return extrainfo_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MatrixMsg::set_allocated_extrainfo(::std::string* extrainfo) {
  if (extrainfo != NULL) {
    set_has_extrainfo();
  } else {
    clear_has_extrainfo();
  }
  extrainfo_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), extrainfo);
  // @@protoc_insertion_point(field_set_allocated:MatrixMsg.extraInfo)
}

// optional int64 count = 3;
inline bool MatrixMsg::has_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MatrixMsg::set_has_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MatrixMsg::clear_has_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MatrixMsg::clear_count() {
  count_ = GOOGLE_LONGLONG(0);
  clear_has_count();
}
inline ::google::protobuf::int64 MatrixMsg::count() const {
  // @@protoc_insertion_point(field_get:MatrixMsg.count)
  return count_;
}
inline void MatrixMsg::set_count(::google::protobuf::int64 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:MatrixMsg.count)
}

// repeated string tasks = 4;
inline int MatrixMsg::tasks_size() const {
  return tasks_.size();
}
inline void MatrixMsg::clear_tasks() {
  tasks_.Clear();
}
inline const ::std::string& MatrixMsg::tasks(int index) const {
  // @@protoc_insertion_point(field_get:MatrixMsg.tasks)
  return tasks_.Get(index);
}
inline ::std::string* MatrixMsg::mutable_tasks(int index) {
  // @@protoc_insertion_point(field_mutable:MatrixMsg.tasks)
  return tasks_.Mutable(index);
}
inline void MatrixMsg::set_tasks(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:MatrixMsg.tasks)
  tasks_.Mutable(index)->assign(value);
}
inline void MatrixMsg::set_tasks(int index, const char* value) {
  tasks_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:MatrixMsg.tasks)
}
inline void MatrixMsg::set_tasks(int index, const char* value, size_t size) {
  tasks_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:MatrixMsg.tasks)
}
inline ::std::string* MatrixMsg::add_tasks() {
  return tasks_.Add();
}
inline void MatrixMsg::add_tasks(const ::std::string& value) {
  tasks_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:MatrixMsg.tasks)
}
inline void MatrixMsg::add_tasks(const char* value) {
  tasks_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:MatrixMsg.tasks)
}
inline void MatrixMsg::add_tasks(const char* value, size_t size) {
  tasks_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:MatrixMsg.tasks)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
MatrixMsg::tasks() const {
  // @@protoc_insertion_point(field_list:MatrixMsg.tasks)
  return tasks_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
MatrixMsg::mutable_tasks() {
  // @@protoc_insertion_point(field_mutable_list:MatrixMsg.tasks)
  return &tasks_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_metamatrix_2eproto__INCLUDED
