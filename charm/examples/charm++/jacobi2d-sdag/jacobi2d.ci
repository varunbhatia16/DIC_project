mainmodule jacobi2d {

  readonly CProxy_Main mainProxy;
  readonly int arrayDimX;
  readonly int arrayDimY;
  readonly int blockDimX;
  readonly int blockDimY;

  readonly int num_chare_x;
  readonly int num_chare_y;

  readonly int maxiterations;

  mainchare Main {
    entry Main(CkArgMsg *m);
    entry void run() {
      while (iterations < WARM_ITER) {
	atomic {
	  array.doStep(CkCallback(CkIndex_Main::report(NULL), thisProxy), 1);
	}
	when report(CkReductionMsg *msg) atomic {
	  iterations++;
	  delete msg;
	}
      }
      atomic "start_timed_portion" {
	startTime = CkWallTimer();
	array.doStep(CkCallback(CkIndex_Main::report(NULL), thisProxy),
		     maxiterations);
      }
      while (iterations < maxiterations) {
	// Each worker reports back to here when it completes an iteration
	// Asynchronous check on threshhold satisfaction
	when report(CkReductionMsg *msg) atomic {
	  iterations++;
	  maxdifference=((double *) msg->getData())[0];
	  delete msg;
	  if (maxdifference - THRESHHOLD < 0)
	    done(true);
	}
      }
      atomic { done(false); }
    };
    entry void report(CkReductionMsg *m);
  };

  array [2D] Jacobi {
    entry Jacobi(void);
    entry void begin_iteration(void);
    entry void receiveGhosts(int iter, int dir, int size,
                             double ghosts[size]);

    entry void doStep(CkCallback cb, int numSteps) {
      atomic "begin_iteration" {
	begin_iteration();
      }
      for(imsg = 0; imsg < numExpected; imsg++) {
	// "iterations" keeps track of messages across steps
	when
          receiveGhosts[iterations] (int iter, int dir, int size,
	  			     double ghosts[size])
	  atomic "process ghosts" {
            processGhosts(dir, size, ghosts);
          }
      }
      atomic "doWork" {
	check_and_compute(cb, numSteps);
      }
    };
  };
};
