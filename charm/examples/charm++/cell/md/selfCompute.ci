module selfCompute {

  // Include md_config.h on the accelerator (for physics constants)
  accelblock { #include "md_config.h" };

  array[3D] SelfCompute {

    entry SelfCompute();

    entry void init(int numParticlesPerPatch);

    entry void patchData(int numParticles,
                         MD_FLOAT particleX[numParticles],
                         MD_FLOAT particleY[numParticles],
                         MD_FLOAT particleZ[numParticles],
                         MD_FLOAT particleQ[numParticles]
                        );

    entry [accel] void doCalc()[
                                 readonly : int numParticles <impl_obj->numParticles>,
                                 readonly : int thisIndex_x <impl_obj->thisIndex.x>,
                                 readonly : int thisIndex_y <impl_obj->thisIndex.y>,
                                 readonly : MD_FLOAT particleX[numParticles] <impl_obj->particleX>,
                                 readonly : MD_FLOAT particleY[numParticles] <impl_obj->particleY>,
                                 readonly : MD_FLOAT particleZ[numParticles] <impl_obj->particleZ>,
                                 readonly : MD_FLOAT particleQ[numParticles] <impl_obj->particleQ>,
                                writeonly : MD_FLOAT f0_x[numParticles] <impl_obj->forceX>,
                                writeonly : MD_FLOAT f0_y[numParticles] <impl_obj->forceY>,
                                writeonly : MD_FLOAT f0_z[numParticles] <impl_obj->forceZ>,
                                writeonly : unsigned int localFlopCount <impl_obj->localFlopCount>
                               ] {

      // DMK - DEBUG
      #if (ENABLE_USER_EVENTS != 0) && defined(CMK_CELL) && (CMK_CELL == 0)
        double __start_time__ = CkWallTimer();
      #endif

      // Calculate the electrostatic force (coulumb's law) between the particles
      //   F = (k_e * (q_0 * q_1)) / (r^2)

      // DMK - DEBUG
      #if COUNT_FLOPS != 0
        localFlopCount = 0;
      #endif
      const int vec_numElems= myvec_numElems;
      const int VEC_MASK= vec_numElems-1;
      const int shifter= sizeof(MD_FLOAT)==4 ? 2 :1;
      register MD_VEC* p0_x_vec = (MD_VEC*)particleX;
      register MD_VEC* p0_y_vec = (MD_VEC*)particleY;
      register MD_VEC* p0_z_vec = (MD_VEC*)particleZ;
      register MD_VEC* p0_q_vec = (MD_VEC*)particleQ;
      register MD_VEC* f0_x_vec = (MD_VEC*)f0_x;
      register MD_VEC* f0_y_vec = (MD_VEC*)f0_y;
      register MD_VEC* f0_z_vec = (MD_VEC*)f0_z;
      register int i;
      register int j;
      register const int numParticlesByVecSize = numParticles / myvec_numElems;

      // Zero out the force output
      MD_VEC zero_vec = vspread_MDF(zero);
      for (j = 0; j < numParticlesByVecSize; j++) {
        f0_x_vec[j] = zero_vec;
        f0_y_vec[j] = zero_vec;
        f0_z_vec[j] = zero_vec;
      }

      // Spread coulumb's constant across a vector
      MD_VEC coulomb_vec = vspread_MDF(COULOMBS_CONSTANT);

      // Outer-loop
      for (i = 0; i < numParticles; i++) {

        // Interact with all particles (one-by-one) until the vector boundary
        for (j = i + 1; ((j & VEC_MASK) != 0x0) && (j < numParticles); j++) {

          MD_FLOAT p_x_diff = particleX[i] - particleX[j];
          MD_FLOAT p_y_diff = particleY[i] - particleY[j];
          MD_FLOAT p_z_diff = particleZ[i] - particleZ[j];
          MD_FLOAT r_2 = (p_x_diff * p_x_diff) + (p_y_diff * p_y_diff) + (p_z_diff * p_z_diff);
          MD_FLOAT r = sqrt(r_2);

          MD_FLOAT p_x_diff_norm = p_x_diff / r;
          MD_FLOAT p_y_diff_norm = p_y_diff / r;
          MD_FLOAT p_z_diff_norm = p_z_diff / r;

          MD_FLOAT p_q_prod = particleQ[i] * particleQ[j];
          MD_FLOAT f_mag = COULOMBS_CONSTANT * (p_q_prod / r_2);

          MD_FLOAT f_x = f_mag * p_x_diff_norm;
          MD_FLOAT f_y = f_mag * p_y_diff_norm;
          MD_FLOAT f_z = f_mag * p_z_diff_norm;

          f0_x[i] += f_x;
          f0_y[i] += f_y;
          f0_z[i] += f_z;
          f0_x[j] -= f_x;
          f0_y[j] -= f_y;
          f0_z[j] -= f_z;

          // DMK - DEBUG
          #if COUNT_FLOPS != 0
            localFlopCount += 26;
          #endif
        }

        // Spread this particle's (p0[i]) values out over vectors
        MD_VEC p0_x_i_vec = vspread_MDF(particleX[i]);
        MD_VEC p0_y_i_vec = vspread_MDF(particleY[i]);
        MD_VEC p0_z_i_vec = vspread_MDF(particleZ[i]);
        MD_VEC p0_q_i_vec = vspread_MDF(particleQ[i]);
        MD_VEC f0_x_i_vec = vspread_MDF(zero);
        MD_VEC f0_y_i_vec = vspread_MDF(zero);
        MD_VEC f0_z_i_vec = vspread_MDF(zero);

        // Switch to vectorized loop for the remaining elements in the particle array
	
        for (j = j >>shifter; j < numParticlesByVecSize; j++) {

          // Load the particles' data
          MD_VEC p0_x_j_vec = p0_x_vec[j];
          MD_VEC p0_y_j_vec = p0_y_vec[j];
          MD_VEC p0_z_j_vec = p0_z_vec[j];
          MD_VEC p0_q_j_vec = p0_q_vec[j];

          // Calculate the vector between the particles
          MD_VEC p_x_diff_vec = p0_x_i_vec - p0_x_j_vec;
          MD_VEC p_y_diff_vec = p0_y_i_vec - p0_y_j_vec;
          MD_VEC p_z_diff_vec = p0_z_i_vec - p0_z_j_vec;
          // Calculate r and r^2 between the particles
          MD_VEC r_2_vec = (p_x_diff_vec * p_x_diff_vec) + (p_y_diff_vec * p_y_diff_vec) + (p_z_diff_vec * p_z_diff_vec);
          MD_VEC r_vec = vsqrt_MDF(r_2_vec);

          // Normalize the vector between the particles
          MD_VEC r_recip_vec = vrecip_MDF(r_vec);
          MD_VEC r_2_recip_vec = vrecip_MDF(r_2_vec);
#if SANITY_CHECK
	  CkAssert(visfinite_MDF(r_2_vec));
	  CkAssert(visfinite_MDF(r_vec));
#endif
//		CkAssert(&p0_x_vec !=);
/*
	{ // how the hell does this not flake out?
		CkPrintf("i %d j %d px_i %+6e px_j %+6e py_i %+6e py_j %+6e pz_i %+6e pz_j%+6e\n",i,j,vextract_MDF(p0_x_i_vec,0),vextract_MDF(p0_x_j_vec,0),vextract_MDF(p0_y_i_vec,0),vextract_MDF(p0_y_j_vec,0),vextract_MDF(p0_z_i_vec,0),vextract_MDF(p0_z_j_vec,0));
	}
*/
          MD_VEC p_x_diff_norm_vec = p_x_diff_vec * r_recip_vec;
          MD_VEC p_y_diff_norm_vec = p_y_diff_vec * r_recip_vec;
          MD_VEC p_z_diff_norm_vec = p_z_diff_vec * r_recip_vec;
          MD_VEC f_mag_vec = coulomb_vec * p0_q_i_vec * p0_q_j_vec * r_2_recip_vec;  // Calc force magnitude

          // Multiply the magnitude by the normalized postition difference vector to
          //   create the force vector
          MD_VEC f_x_vec = p_x_diff_norm_vec * f_mag_vec;
          MD_VEC f_y_vec = p_y_diff_norm_vec * f_mag_vec;
          MD_VEC f_z_vec = p_z_diff_norm_vec * f_mag_vec;

          // Add the force to the outer-loop particle and subtract it from the inner-loop particles
          f0_x_i_vec += f_x_vec;
          f0_y_i_vec += f_y_vec;
          f0_z_i_vec += f_z_vec;
          f0_x_vec[j] -= f_x_vec;
          f0_y_vec[j] -= f_y_vec;
          f0_z_vec[j] -= f_z_vec;

          // DMK - DEBUG
          #if COUNT_FLOPS != 0
            localFlopCount += (31 * 4);
          #endif
        }

        // Add force values for p0[i] into f0
        f0_x[i] += vextract_MDF(f0_x_i_vec, 0) + vextract_MDF(f0_x_i_vec, 1) + vextract_MDF(f0_x_i_vec, 2) + vextract_MDF(f0_x_i_vec, 3);
        f0_y[i] += vextract_MDF(f0_y_i_vec, 0) + vextract_MDF(f0_y_i_vec, 1) + vextract_MDF(f0_y_i_vec, 2) + vextract_MDF(f0_y_i_vec, 3);
        f0_z[i] += vextract_MDF(f0_z_i_vec, 0) + vextract_MDF(f0_z_i_vec, 1) + vextract_MDF(f0_z_i_vec, 2) + vextract_MDF(f0_z_i_vec, 3);
      }

      // DMK - DEBUG
      #if (ENABLE_USER_EVENTS != 0) && defined(CMK_CELL) && (CMK_CELL == 0)
        double __end_time__ = CkWallTimer();
        traceUserBracketEvent(PROJ_USER_EVENT_SELFCOMPUTE_DOCALC_WORK, __start_time__, __end_time__);
      #endif

    } doCalc_callback;

  };

};
