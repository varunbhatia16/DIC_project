module patch {

  accelblock { #include "md_config.h" };

  accelblock {

    void accumForce(int numParticles,
                    MD_FLOAT* forceSumX, MD_FLOAT* forceSumY, MD_FLOAT* forceSumZ,
                    MD_FLOAT* forceX, MD_FLOAT* forceY, MD_FLOAT* forceZ
                   ) {
      register MD_VEC* fsx = (MD_VEC*)forceSumX;
      register MD_VEC* fsy = (MD_VEC*)forceSumY;
      register MD_VEC* fsz = (MD_VEC*)forceSumZ;
      register MD_VEC* fx = (MD_VEC*)forceX;
      register MD_VEC* fy = (MD_VEC*)forceY;
      register MD_VEC* fz = (MD_VEC*)forceZ;
      register const int numParticles_vec = numParticles / myvec_numElems;
      register int i;
      for (i = 0; i < numParticles_vec; i++) {
        fsx[i] = vadd_MDF(fsx[i], fx[i]);
        fsy[i] = vadd_MDF(fsy[i], fy[i]);
        fsz[i] = vadd_MDF(fsz[i], fz[i]);
      }
    }
  };

  group ProxyPatch {

    entry ProxyPatch(int patchIndex);

    entry void init(int numParticles);

    entry void patchData(int numParticles,
                         MD_FLOAT particleX[numParticles],
                         MD_FLOAT particleY[numParticles],
                         MD_FLOAT particleZ[numParticles],
                         MD_FLOAT particleQ[numParticles]
                        );

    entry void forceCheckIn(int numParticles,
                            MD_FLOAT forceX[numParticles],
                            MD_FLOAT forceY[numParticles],
                            MD_FLOAT forceZ[numParticles]
                           );
  };

  array[3D] Patch {

    entry Patch();

    entry void init(int numParticles);
    entry void init(int numParticles, CProxy_ProxyPatch proxyPatchProxy);

    entry void startIteration();
    entry void startIterations(int numIters);

    entry void forceCheckIn(int numParticles,
                            MD_FLOAT forceX[numParticles],
                            MD_FLOAT forceY[numParticles],
                            MD_FLOAT forceZ[numParticles]
                           );
    entry void forceCheckIn(int numParticles,
                            MD_FLOAT forceX[numParticles],
                            MD_FLOAT forceY[numParticles],
                            MD_FLOAT forceZ[numParticles],
                            int numForceCheckIns
                           );

    entry [accel] void integrate()[ readonly : int numParticles <impl_obj->numParticles>,
                                    readonly : int thisIndex_x <impl_obj->thisIndex.x>,
                                    readonly : int thisIndex_y <impl_obj->thisIndex.y>,
                                    readonly : int thisIndex_z <impl_obj->thisIndex.z>,
                                   readwrite : MD_FLOAT p_x[numParticles] <impl_obj->particleX>,
                                   readwrite : MD_FLOAT p_y[numParticles] <impl_obj->particleY>,
                                   readwrite : MD_FLOAT p_z[numParticles] <impl_obj->particleZ>,
                                    readonly : MD_FLOAT p_m[numParticles] <impl_obj->particleM>,
                                    readonly : MD_FLOAT f_x[numParticles] <impl_obj->forceSumX>,
                                    readonly : MD_FLOAT f_y[numParticles] <impl_obj->forceSumY>,
                                    readonly : MD_FLOAT f_z[numParticles] <impl_obj->forceSumZ>,
                                   readwrite : MD_FLOAT v_x[numParticles] <impl_obj->velocityX>,
                                   readwrite : MD_FLOAT v_y[numParticles] <impl_obj->velocityY>,
                                   readwrite : MD_FLOAT v_z[numParticles] <impl_obj->velocityZ>,
                                   writeonly : unsigned int localFlopCount <impl_obj->localFlopCount>
                                  ] {

      // DMK - DEBUG
      #if COUNT_FLOPS != 0
        localFlopCount = 0;
      #endif

      register MD_VEC* p_x_vec = (MD_VEC*)p_x;
      register MD_VEC* p_y_vec = (MD_VEC*)p_y;
      register MD_VEC* p_z_vec = (MD_VEC*)p_z;
      register MD_VEC* p_m_vec = (MD_VEC*)p_m;
      register MD_VEC* f_x_vec = (MD_VEC*)f_x;
      register MD_VEC* f_y_vec = (MD_VEC*)f_y;
      register MD_VEC* f_z_vec = (MD_VEC*)f_z;
      register MD_VEC* v_x_vec = (MD_VEC*)v_x;
      register MD_VEC* v_y_vec = (MD_VEC*)v_y;
      register MD_VEC* v_z_vec = (MD_VEC*)v_z;
      register int i;
      register const int numParticles_vec = numParticles / myvec_numElems;

      MD_VEC delta_time_vec = vspread_MDF(TIME_PER_STEP);

      // Add the acceleration to the velocity and add the update velocity to the position
      for (i = 0; i < numParticles_vec; i++) {

        // Update the velocity : v_new = v_old + (F/m)dt
        MD_VEC new_v_x_vec = v_x_vec[i] + (delta_time_vec * (f_x_vec[i] / p_m_vec[i]));
        MD_VEC new_v_y_vec = v_y_vec[i] + (delta_time_vec * (f_y_vec[i] / p_m_vec[i]));
        MD_VEC new_v_z_vec = v_z_vec[i] + (delta_time_vec * (f_z_vec[i] / p_m_vec[i]));
        v_x_vec[i] = new_v_x_vec;
        v_y_vec[i] = new_v_y_vec;
        v_z_vec[i] = new_v_z_vec;

        // Update the position : pos_new = pos_old + v_new
        p_x_vec[i] += delta_time_vec * new_v_x_vec;
        p_y_vec[i] += delta_time_vec * new_v_y_vec;
        p_z_vec[i] += delta_time_vec * new_v_z_vec;

        // DMK - DEBUG
        #if COUNT_FLOPS != 0
          localFlopCount += (15 * 4);
        #endif
      }

    } integrate_callback;

  };

};
