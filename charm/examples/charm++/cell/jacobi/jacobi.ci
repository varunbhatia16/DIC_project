module jacobi {

  message EastWestGhost;
  message NorthSouthGhost;

  accelblock { #include "jacobi_config.h" };

  array [1D] Jacobi {

    entry Jacobi(void);

    entry void startIteration(void);

    entry void northData(int size, float ghostData[size], int iterRef);
    entry void southData(int size, float ghostData[size], int iterRef);
    entry void eastData(int size, float ghostData[size], int iterRef);
    entry void westData(int size, float ghostData[size], int iterRef);

    entry void northData_msg(NorthSouthGhost*);
    entry void southData_msg(NorthSouthGhost*);
    entry void eastData_msg(EastWestGhost*);
    entry void westData_msg(EastWestGhost*);

    entry [accel] void doCalculation()
                                    [  readonly : float    matrix[DATA_BUFFER_SIZE] <impl_obj->matrix>,
                                      writeonly : float matrixTmp[DATA_BUFFER_SIZE] <impl_obj->matrixTmp>
                                    ] {
      int x, y;
      register float oneFifth_f = 1.0f / 5.0f;

      // Assume the maxError is zero
      register float maxError = 0.0f;

      // Do the test to see if this call is the most northwestern tile in the overall matrix
      register int isNorthwestern = (matrix[DATA_BUFFER_COLS - 1] == 1.0f);

      // Peel off the first iteration of the y loop since the starting x values changes depending on
      //   the value of isNorthwestern
      for (x = ((isNorthwestern) ? (2) : (1)); x < (DATA_BUFFER_COLS - 1); x++) {

        register int index = GET_DATA_I(x, 1);

        matrixTmp[index] = (matrix[index] +
                            matrix[GET_DATA_I(x - 1, 1)] +
                            matrix[GET_DATA_I(x + 1, 1)] +
                            matrix[GET_DATA_I(x    , 0)] +
                            matrix[GET_DATA_I(x    , 2)]
                           ) * oneFifth_f;

        register float tmp = matrixTmp[index] - matrix[index];
        // NOTE: Values should rise so matrixTmp[index should be > matrix[index]
        if (tmp < 0.0f) { tmp *= -1.0f; }
        if (maxError < tmp) { maxError = tmp; }
      }

      // Calculate the rest of the values (starting index is the same regardless of isNorthwest)
      for (y = 2; y < (DATA_BUFFER_ROWS - 1); y++) {
        for (x = 1; x < (DATA_BUFFER_COLS - 2); x++) {

          register int index = GET_DATA_I(x, y);

          matrixTmp[index] = (matrix[index] +
                              matrix[GET_DATA_I(x - 1, y    )] +
                              matrix[GET_DATA_I(x + 1, y    )] +
                              matrix[GET_DATA_I(x    , y - 1)] +
                              matrix[GET_DATA_I(x    , y + 1)]
                             ) * oneFifth_f;

          register float tmp = matrixTmp[index] - matrix[index];
          // NOTE: Values should rise so matrixTmp[index] should be > matrix[index]
          if (tmp < 0.0f) { tmp *= -1.0f; }
          if (maxError < tmp) { maxError = tmp; }
        }
      }

      // NOTE : Since the writeOnlyPtr is being used, the data buffer is initially allocated
      //   on the SPE and is not initialized.  Make sure to write to all the entries so there
      //   are no "junk" values anywhere in matrixTmp when it is passed back to main memory.
      //   Though, ignore the areas that will be overwritten when ghost data arrives next
      //   iteration.  This is a tradeoff... have to do this or use the readWritePtr.  These
      //   stores to the LS are probably faster than DMAing the matrixTmp buffer down to the LS.  ;)
      matrixTmp[GET_DATA_I(0, DATA_BUFFER_ROWS - 1)] = 0.0f;                     // unused corner (here for completeness)
      matrixTmp[GET_DATA_I(DATA_BUFFER_COLS - 1, DATA_BUFFER_ROWS - 1)] = 0.0f;  // unused corner (here for completeness)
      if (isNorthwestern) {
        matrixTmp[GET_DATA_I(1, 1)] = 1.0f;  // Hold this single element constant across iterations
        matrixTmp[GET_DATA_I(DATA_BUFFER_COLS - 1, 0)] = 1.0f;  // northwest flag
      } else {
        matrixTmp[GET_DATA_I(DATA_BUFFER_COLS - 1, 0)] = 0.0f;  // northwest flag
      }

      // Place the maxError in index 0 of matrixTmp
      matrixTmp[GET_DATA_I(0, 0)] = maxError;

    } doCalculation_post;

    entry void doCalculation_post();

  };

};
